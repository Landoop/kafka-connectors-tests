- name: coyote
  title: kafka-connect-yahoo

- name: Setup Containers
  entries:
    - name: Docker Compose Pull
      command: docker-compose pull
      ignore_exit_code: true
    - name: Docker Compose Up
      command: docker-compose up -d
    - name: Sleep a bit
      command: sleep 70
      nolog: true
    - name: Check docker compose log
      command: docker-compose logs
      stdout_has: [ 'INFO success: broker entered RUNNING state' ]
      stdout_not_has: [ 'INFO exited: broker' ]

- name: Setup Yahoo Connector
  entries:
    - name: Create FX Topic
      command: >
        docker run --rm --network=kafkaconnectyahoo_default landoop/fast-data-dev
          kafka-topics --zookeeper fast-data-dev:2181 --topic yahoo-fx-source --partition 1 --replication 1 --create
    - name: Create Stocks Topic
      command: >
        docker run --rm --network=kafkaconnectyahoo_default landoop/fast-data-dev
          kafka-topics --zookeeper fast-data-dev:2181 --topic yahoo-stocks-source --partition 1 --replication 1 --create
    - name: Create a Yahoo Finance Distributed Connector
      command: >
        docker run --rm --network=kafkaconnectyahoo_default -i landoop/fast-data-dev
          curl -vs --stderr - -X POST -H "Content-Type: application/json"
               --data @-
               "http://fast-data-dev:8083/connectors"
      stdout_not_has: [ 'HTTP/1.1 [45][0-9][0-9] ' ]
      stdin: |
        {
          "name": "yahoo-finance-source",
          "config": {
            "connector.class": "com.datamountaineer.streamreactor.connect.yahoo.source.YahooSourceConnector",
            "tasks.max": "1",
            "connect.yahoo.source.fx.topic": "yahoo-fx-source",
            "connect.yahoo.source.fx.subscriptions": "USDGBP=X,USDGBP=X,EURGBP=X",
            "connect.yahoo.source.stocks.topic": "yahoo-stocks-source",
            "connect.yahoo.source.stocks.subscriptions": "GOOGL,MSFT,AAPL",
            "connect.yahoo.source.error.policy": "THROW",
            "connect.yahoo.source.poll.interval": "10000"
          }
        }

- name: Test Connector
  entries:
    - command: sleep 60
      nolog: true
    - name: Read Entries from FX Topic
      command: >
        timeout 20
        docker run --rm --network=kafkaconnectyahoo_default landoop/fast-data-dev
          kafka-avro-console-consumer --bootstrap-server fast-data-dev:9092
                                      --topic yahoo-fx-source --from-beginning --new-consumer
                                      --property schema.registry.url=http://fast-data-dev:8081
      ignore_exit_code: true
      stdout_has: [ 'USDGBP', 'EURGBP', 'price' ]
    - name: Read Entries from Stock Topic
      command: >
        timeout 20
        docker run --rm --network=kafkaconnectyahoo_default landoop/fast-data-dev
          kafka-avro-console-consumer --bootstrap-server fast-data-dev:9092
                                      --topic yahoo-stocks-source --from-beginning --new-consumer
                                      --property schema.registry.url=http://fast-data-dev:8081
      ignore_exit_code: true
      stdout_has: [ 'Microsoft', 'Alphabet', 'Apple', 'currency' ]
    - name: Read First 4000 Lines of Connect Logs
      command: >
        docker exec kafkaconnectyahoo_fast-data-dev_1 head -n4000 /var/log/connect-distributed.log
      stdout_not_has: [ '\] ERROR' ]

- name: Clean-up Containers
  entries:
    - name: Docker Compose Down
      command: docker-compose down
