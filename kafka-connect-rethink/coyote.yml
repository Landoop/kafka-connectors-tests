- name: coyote
  title: kafka-connect-rethink

- name: Setup Containers
  entries:
    - name: Docker Compose Pull
      command: docker-compose pull
      ignore_exit_code: true
    - name: Docker Compose Build
      command: docker-compose build
    - name: Docker Compose Up
      command: docker-compose up -d
    - name: Wait for Connect to get up
      command: >
        bash -c '
          for ((i=0;i<30;i++)); do
            sleep 10;
            docker exec kafkaconnectrethink_fast-data-dev_1 curl "http://localhost:8083/connectors" && break;
          done'
      nolog: true
    - command: sleep 30
      nolog: true
    - name: Check docker compose log
      command: docker-compose logs
      stdout_has: [ 'INFO success: broker entered RUNNING state' ]
      stdout_not_has: [ 'INFO exited: broker' ]

- name: Setup RethinkDB Connectors
  entries:
    - name: Create Sink Topic
      command: >
        docker run --rm --network=kafkaconnectrethink_default landoop/fast-data-dev
          kafka-topics --zookeeper fast-data-dev:2181 --topic rethink-sink --partitions 1 --replication-factor 1 --create
    - name: Create Source Topic
      command: >
        docker run --rm --network=kafkaconnectrethink_default landoop/fast-data-dev
          kafka-topics --zookeeper fast-data-dev:2181 --topic rethink-source --partitions 1 --replication-factor 1 --create
    - name: Create RethinkDB Test Database and Table
      command: >
        docker run --rm --network=kafkaconnectrethink_default landoop/fast-data-dev-rethinkdb-client
          rethinkdb-test -server rethinkdb:28015 -database landoop -create-db -table connect_test -create-table
    - name: Create a RethinkDB Distributed Sink Connector
      command: >
        docker run --rm --network=kafkaconnectrethink_default -i landoop/fast-data-dev
          curl -vs --stderr - -X POST -H "Content-Type: application/json"
               --data @-
               "http://fast-data-dev:8083/connectors"
      stdout_not_has: [ 'HTTP/1.1 [45][0-9][0-9] ' ]
      stdin: |
        {
          "name": "rethink-sink",
          "config": {
            "connector.class": "com.datamountaineer.streamreactor.connect.rethink.sink.ReThinkSinkConnector",
            "tasks.max": "1",
            "topics": "rethink-sink",
            "connect.rethink.sink.db": "landoop",
            "connect.rethink.db": "landoop",
            "connect.rethink.sink.host": "rethinkdb",
            "connect.rethink.host": "rethinkdb",
            "connect.rethink.sink.port": "28015",
            "connect.rethink.port": "28015",
            "connect.rethink.sink.kcql": "INSERT INTO connect_test SELECT * FROM rethink-sink",
            "connect.rethink.kcql": "INSERT INTO connect_test SELECT * FROM rethink-sink",
            "connect.deprecated.fields.to.remove": "connect.rethink.sink.kcql, connect.rethink.sink.db, connect.rethink.sink.host, connect.rethink.sink.port"
           }
        }
    - name: Create a RethinkDB Distributed Source Connector
      command: >
        docker run --rm --network=kafkaconnectrethink_default -i landoop/fast-data-dev
          curl -vs --stderr - -X POST -H "Content-Type: application/json"
               --data @-
               "http://fast-data-dev:8083/connectors"
      stdout_not_has: [ 'HTTP/1.1 [45][0-9][0-9] ' ]
      stdin: |
        {
          "name": "rethink-source",
          "config": {
            "connector.class": "com.datamountaineer.streamreactor.connect.rethink.source.ReThinkSourceConnector",
            "tasks.max": "1",
            "connect.rethink.source.db": "landoop",
            "connect.rethink.db": "landoop",
            "connect.rethink.source.host": "rethinkdb",
            "connect.rethink.host": "rethinkdb",
            "connect.rethink.source.port": "28015",
            "connect.rethink.port": "28015",
            "connect.rethink.source.kcql": "INSERT INTO rethink-source SELECT * FROM connect_test",
            "connect.rethink.kcql": "INSERT INTO rethink-source SELECT * FROM connect_test",
            "connect.deprecated.fields.to.remove": "connect.rethink.source.kcql, connect.rethink.source.db, connect.rethink.source.host, connect.rethink.source.port"
           }
        }
    - command: sleep 30
      nolog: true

- name: Test Connectors
  entries:
    - name: Write Entries into Topic
      command: >
        docker run --rm -i --network=kafkaconnectrethink_default landoop/fast-data-dev
          kafka-avro-console-producer --broker-list fast-data-dev:9092
            --topic rethink-sink --property schema.registry.url="http://fast-data-dev:8081"
            --property
            value.schema='{"type":"record","name":"User","namespace":"com.datamountaineer.streamreactor.connect.jms","fields":[{"name":"firstName","type":"string"},{"name":"lastName","type":"string"},{"name":"age","type":"int"},{"name":"salary","type":"double"}]}'
      stdin: |
        {"firstName": "John", "lastName": "Smith", "age":30, "salary": 4830}
        {"firstName": "Anna", "lastName": "Jones", "age":28, "salary": 5430}
      timeout: 20s
    - command: sleep 30
      nolog: true
    - name: Read RethinkDB Test Table (verify sink)
      command: >
        docker run --rm --network=kafkaconnectrethink_default landoop/fast-data-dev-rethinkdb-client
          rethinkdb-test -server rethinkdb:28015 -database landoop -table connect_test -read-table
      stdout_has: [ 'John', 'Smith', 'Anna', 'Jones' ]
    - name: Read Entries from Source Topic (verify source)
      command: >
        timeout 20
        docker run --rm --network=kafkaconnectrethink_default landoop/fast-data-dev
          kafka-avro-console-consumer --bootstrap-server fast-data-dev:9092
                                      --topic rethink-source --from-beginning --new-consumer
                                      --property schema.registry.url=http://fast-data-dev:8081
      ignore_exit_code: true
      stdout_has: [ 'John', 'Smith', 'Anna', 'Jones', '4830' ]
    - name: Read First 8000 Lines of Connect Logs
      command: >
        docker exec kafkaconnectrethink_fast-data-dev_1 head -n8000 /var/log/connect-distributed.log
      stdout_has: [ '\] INFO .*Writ' ]
      stdout_not_has: [ '\] ERROR' ]

- name: Clean-up Containers
  entries:
    - name: Docker Compose Down
      command: docker-compose down
