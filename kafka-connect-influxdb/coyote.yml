- name: coyote
  title: kafka-connect-influxdb

- name: Setup Containers
  entries:
    - name: Docker Compose Pull
      command: docker-compose pull
      ignore_exit_code: true
    - name: Docker Compose Build
      command: docker-compose build
    - name: Docker Compose Up
      command: docker-compose up -d
    - name: Wait for Connect to get up
      command: >
        bash -c '
          for ((i=0;i<30;i++)); do
            sleep 10;
            docker exec kafkaconnectinfluxdb_fast-data-dev_1 curl "http://localhost:8083/connectors" && break;
          done'
      nolog: true
    - name: Check docker compose log
      command: docker-compose logs
      stdout_has: [ 'INFO success: broker entered RUNNING state' ]
      stdout_not_has: [ 'INFO exited: broker' ]

- name: Setup InfluxDB Connector
  entries:
    - name: Create Topic
      command: >
        docker run --rm --network=kafkaconnectinfluxdb_default landoop/fast-data-dev
          kafka-topics --zookeeper fast-data-dev:2181 --topic influxdb-sink --partitions 1 --replication-factor 1 --create
    - name: Create InfluxDB Admin User
      command: >
        docker exec -i kafkaconnectinfluxdb_influxdb_1
          influx
      stdin: |
       CREATE USER landoop WITH PASSWORD 'landoop' WITH ALL PRIVILEGES;
    - name: Create InfluxDB Database
      command: >
        docker exec -i kafkaconnectinfluxdb_influxdb_1
          influx -username landoop -password landoop
      stdin: |
       CREATE DATABASE landoop;
    - name: Set Database Retention Policy
      command: >
        docker exec -i kafkaconnectinfluxdb_influxdb_1
          influx -username landoop -password landoop -database landoop
      stdin: |
       CREATE RETENTION POLICY "default" ON "landoop" DURATION 30d REPLICATION 1 DEFAULT;
    - name: Create an InfluxDB Distributed Connector
      command: >
        docker run --rm --network=kafkaconnectinfluxdb_default -i landoop/fast-data-dev
          curl -vs --stderr - -X POST -H "Content-Type: application/json"
               --data @-
               "http://fast-data-dev:8083/connectors"
      stdout_not_has: [ 'HTTP/1.1 [45][0-9][0-9] ' ]
      stdin: |
        {
          "name": "influxdb-sink",
          "config": {
            "connector.class": "com.datamountaineer.streamreactor.connect.influx.InfluxSinkConnector",
            "tasks.max": "1",
            "topics": "influxdb-sink",
            "connect.influx.url": "http://influxdb:8086",
            "connect.influx.username": "landoop",
            "connect.influx.password": "landoop",
            "connect.influx.db": "landoop",
            "connect.influx.retention.policy": "default",
            "connect.influx.kcql": "INSERT INTO test SELECT * FROM influxdb-sink"
          }
        }
    - command: sleep 20
      nolog: true

- name: Test Connector
  entries:
    - name: Write Entries into Topic
      command: >
        docker run --rm -i --network=kafkaconnectinfluxdb_default landoop/fast-data-dev
          kafka-avro-console-producer --broker-list fast-data-dev:9092
            --topic influxdb-sink --property schema.registry.url="http://fast-data-dev:8081"
            --property
            value.schema='{"type":"record","name":"myrecord","fields":[{"name":"id","type":"int"},{"name":"temperature","type":"int"}]}'
      stdin: |
        {"id": 999, "temperature": 28}
        {"id": 888, "temperature": 37}
      timeout: 20s
    - command: sleep 120
      nolog: true
      # this wait is so long because influxdb delays to show new entries for non-default policies
    - name: Verify Entries in InfluxDB
      command: >
        docker exec -i kafkaconnectinfluxdb_influxdb_1
          influx -username landoop -password landoop -database landoop
      stdin: |
        SELECT * FROM "test";
      stdout_has: [ '\s*28\n', '\s*37\n', 'temperature' ]
    - name: Read First 4000 Lines of Connect Logs
      command: >
        docker exec kafkaconnectinfluxdb_fast-data-dev_1 head -n4000 /var/log/connect-distributed.log
      stdout_not_has: [ '\] ERROR' ]

- name: Clean-up Containers
  entries:
    - name: Docker Compose Down
      command: docker-compose down
