- name: coyote
  title: Fast Data Demo

- name: Setup Containers
  entries:
    - name: Remove Running Demo
      command: docker-compose down
      ignore_exit_code: true
    - name: Docker Compose Pull
      command: docker-compose pull
      ignore_exit_code: true
    - name: Docker Compose Build
      command: docker-compose build
    - name: Docker Compose Up
      command: docker-compose up -d
    - name: Sleep a bit
      command: sleep 180
      nolog: true
    - name: Check docker compose log
      command: docker-compose logs
      stdout_has: [ 'INFO success: broker entered RUNNING state' ]
      stdout_not_has: [ 'INFO exited: broker' ]

- name: Setup Yahoo Connector
  entries:
    - name: Create FX Topic
      command: >
        docker run --rm --network=fastdatademo_default landoop/fast-data-dev
          kafka-topics --zookeeper fast-data-dev:2181 --topic yahoo-fx --partitions 1 --replication-factor 1 --create
    - name: Create Stocks Topic
      command: >
        docker run --rm --network=fastdatademo_default landoop/fast-data-dev
          kafka-topics --zookeeper fast-data-dev:2181 --topic yahoo-stocks --partitions 1 --replication-factor 1 --create
    - name: Create a Yahoo Finance Distributed Connector
      command: >
        docker run --rm --network=fastdatademo_default -i landoop/fast-data-dev
          curl -vs --stderr - -X POST -H "Content-Type: application/json"
               --data @-
               "http://fast-data-dev:8083/connectors"
      stdout_not_has: [ 'HTTP/1.1 [45][0-9][0-9] ' ]
      stdin: |
        {
          "name": "yahoo-finance-source",
          "config": {
            "connector.class": "com.datamountaineer.streamreactor.connect.yahoo.source.YahooSourceConnector",
            "tasks.max": "1",
            "connect.yahoo.source.fx.topic": "yahoo-fx",
            "connect.yahoo.source.fx.subscriptions": "USDGBP=X,USDGBP=X,EURGBP=X",
            "connect.yahoo.source.stocks.topic": "yahoo-stocks",
            "connect.yahoo.source.stocks.subscriptions": "GOOGL,MSFT,AAPL",
            "connect.yahoo.source.error.policy": "THROW",
            "connect.yahoo.source.poll.interval": "10000"
          }
        }

## Disabled because it is incompatible with ActiveMQ. To enable it, disable jms connector
## and isntead of the custom fast-data-dev-with-deps image, use landoop/fast-data-dev.
# - name: Setup ElasticSearch Connector
#   entries:
#     - name: Create an ElasticSearch Distributed Connector
#       command: >
#         docker run --rm --network=fastdatademo_default -i landoop/fast-data-dev
#           curl -vs --stderr - -X POST -H "Content-Type: application/json"
#                --data @-
#                "http://fast-data-dev:8083/connectors"
#       stdout_not_has: [ 'HTTP/1.1 [45][0-9][0-9] ' ]
#       stdin: |
#         {
#           "name": "elastic-sink",
#           "config": {
#             "connector.class": "com.datamountaineer.streamreactor.connect.elastic.ElasticSinkConnector",
#             "tasks.max": "1",
#             "topics": "yahoo-stocks",
#             "connect.elastic.url": "elasticsearch:9300",
#             "connect.elastic.cluster.name": "landoop",
#             "connect.elastic.sink.kcql": "INSERT INTO yahoo-stocks SELECT * FROM yahoo-stocks"
#           }
#         }
#     - command: sleep 20
#       nolog: true

- name: Setup Hazelcast Connector
  entries:
    - name: Create a Hazelcast Distributed Connector using Reliable Topics
      command: >
        docker run --rm --network=fastdatademo_default -i landoop/fast-data-dev
          curl -vs --stderr - -X POST -H "Content-Type: application/json"
               --data @-
               "http://fast-data-dev:8083/connectors"
      stdout_not_has: [ 'HTTP/1.1 [45][0-9][0-9] ' ]
      stdin: |
        {
          "name": "hazelcast-sink",
          "config": {
            "connector.class": "com.datamountaineer.streamreactor.connect.hazelcast.sink.HazelCastSinkConnector",
            "tasks.max": "1",
            "topics": "yahoo-fx",
            "connect.hazelcast.cluster.members": "hazelcast",
            "connect.hazelcast.kcql": "INSERT INTO yahoo-fx SELECT * FROM yahoo-fx WITHFORMAT JSON",
            "connect.hazelcast.group.name": "dev",
            "connect.hazelcast.group.password": "dev-pass"
          }
        }
    - command: sleep 20
      nolog: true

- name: Setup Redis Connector
  entries:
    - name: Create a Redis Distributed Connector
      command: >
        docker run --rm --network=fastdatademo_default -i landoop/fast-data-dev
          curl -vs --stderr - -X POST -H "Content-Type: application/json"
               --data @-
               "http://fast-data-dev:8083/connectors"
      stdout_not_has: [ 'HTTP/1.1 [45][0-9][0-9] ' ]
      stdin: |
        {
          "name": "redis-sink",
          "config": {
            "connector.class": "com.datamountaineer.streamreactor.connect.redis.sink.RedisSinkConnector",
            "tasks.max": "1",
            "topics": "yahoo-stocks",
            "connect.redis.host": "redis",
            "connect.redis.port": "6379",
            "connect.redis.password": "pass",
            "connect.redis.kcql": "SELECT name, currency, stock_exchange, symbol, price from yahoo-stocks PK symbol"
          }
        }
    - command: sleep 30
      nolog: true

- name: Setup InfluxDB Connector
  entries:
    - name: Create InfluxDB Admin User
      command: >
        docker exec -i fastdatademo_influxdb_1
          influx
      stdin: |
       CREATE USER landoop WITH PASSWORD 'landoop' WITH ALL PRIVILEGES;
    - name: Create InfluxDB Database
      command: >
        docker exec -i fastdatademo_influxdb_1
          influx -username landoop -password landoop
      stdin: |
       CREATE DATABASE landoop;
    - name: Set Database Retention Policy
      command: >
        docker exec -i fastdatademo_influxdb_1
          influx -username landoop -password landoop -database landoop
      stdin: |
       CREATE RETENTION POLICY "default" ON "landoop" DURATION 30d REPLICATION 1 DEFAULT;
    - name: Create an InfluxDB Distributed Connector
      command: >
        docker run --rm --network=fastdatademo_default -i landoop/fast-data-dev
          curl -vs --stderr - -X POST -H "Content-Type: application/json"
               --data @-
               "http://fast-data-dev:8083/connectors"
      stdout_not_has: [ 'HTTP/1.1 [45][0-9][0-9] ' ]
      stdin: |
        {
          "name": "influxdb-sink",
          "config": {
            "connector.class": "com.datamountaineer.streamreactor.connect.influx.InfluxSinkConnector",
            "tasks.max": "1",
            "topics": "yahoo-stocks",
            "connect.influx.url": "http://influxdb:8086",
            "connect.influx.username": "landoop",
            "connect.influx.password": "landoop",
            "connect.influx.db": "landoop",
            "connect.influx.retention.policy": "default",
            "connect.influx.kcql": "INSERT INTO stocks-trade SELECT last_trade_size, last_trade_time FROM yahoo-stocks WITHTIMESTAMP last_trade_time"
          }
        }
    - command: sleep 30
      nolog: true

- name: Setup JMS (ActiveMQ) Connector
  entries:
    - name: Setup a Listener for ActiveMQ Topic
      command: >
        docker exec -d fastdatademo_fast-data-dev_1
          nohup activemq-test -server activemq:61613 -origin /topic/yahoo_fx -log /dev/null
    - name: Create a JMS Distributed Connector
      command: >
        docker run --rm --network=fastdatademo_default -i landoop/fast-data-dev
          curl -vs --stderr - -X POST -H "Content-Type: application/json"
               --data @-
               "http://fast-data-dev:8083/connectors"
      stdout_not_has: [ 'HTTP/1.1 [45][0-9][0-9] ' ]
      stdin: |
        {
          "name": "jms-sink",
          "config": {
            "connector.class": "com.datamountaineer.streamreactor.connect.jms.sink.JMSSinkConnector",
            "tasks.max": "1",
            "topics": "yahoo-fx",
            "connect.jms.url": "tcp://activemq:61616",
            "connect.jms.connection.factory": "ConnectionFactory",
            "connect.jms.initial.context.factory": "org.apache.activemq.jndi.ActiveMQInitialContextFactory",
            "connect.jms.kcql": "INSERT INTO yahoo_fx SELECT * FROM yahoo-fx WITHTYPE TOPIC",
            "connect.jms.topics": "yahoo_fx"
          }
        }
    - command: sleep 30
      nolog: true

- name: Setup Kudu Connector
  entries:
    - name: Create Kudu Table
      command: >
        docker exec fastdatademo_kudu_1
          java -DkuduMaster=127.0.0.1 -jar /test-apps/create-table/target/kudu-java-sample-1.0-SNAPSHOT.jar
      stdout_not_has: [ 'NonRecoverableException' ]
      stderr_not_has: [ 'NonRecoverableException' ]
    - name: Create a Kudu Distributed Connector
      command: >
        docker run --rm --network=fastdatademo_default -i landoop/fast-data-dev
          curl -vs --stderr - -X POST -H "Content-Type: application/json"
               --data @-
               "http://fast-data-dev:8083/connectors"
      stdout_not_has: [ 'HTTP/1.1 [45][0-9][0-9] ' ]
      stdin: |
        {
          "name": "kudu-sink",
          "config": {
            "connector.class": "com.datamountaineer.streamreactor.connect.kudu.sink.KuduSinkConnector",
            "tasks.max": "1",
            "topics": "yahoo-stocks",
            "connect.kudu.master": "kudu",
            "connect.kudu.kcql": "INSERT INTO connect_test SELECT last_trade_size as id, symbol as random_field FROM yahoo-stocks"
          }
        }
    - command: sleep 30
      nolog: true

## Cassandra is disabled becuase it fails for now
# - name: Setup Cassandra Sink Connector
#   entries:
#     - name: Create Cassandra Sink Table
#       command: >
#         docker run --rm --network=fastdatademo_default -i landoop/cassandra
#           cqlsh -u cassandra -p cassandra cassandra
#       stdin: |
#         CREATE KEYSPACE sink WITH REPLICATION = {'class' : 'SimpleStrategy', 'replication_factor' : 1};
#         use sink;

#         create table yahoo_stocks_trade (currency varchar, name varchar, symbol varchar, last_trade_size double, last_trade_time varchar, PRIMARY KEY (symbol, last_trade_time));
#     - name: Create a Cassandra Sink Distributed Connector
#       command: >
#         docker run --rm --network=fastdatademo_default -i landoop/fast-data-dev
#           curl -vs --stderr - -X POST -H "Content-Type: application/json"
#                --data @-
#                "http://fast-data-dev:8083/connectors"
#       stdout_not_has: [ 'HTTP/1.1 [45][0-9][0-9] ' ]
#       stdin: |
#         {
#           "name": "cassandra-sink",
#           "config": {
#             "connector.class": "com.datamountaineer.streamreactor.connect.cassandra.sink.CassandraSinkConnector",
#             "tasks.max": "1",
#             "topics": "yahoo-stocks",
#             "connect.cassandra.key.space": "sink",
#             "connect.cassandra.sink.kcql": "UPSERT INTO yahoo_stocks_trade SELECT currency, name, symbol, last_trade_size, last_trade_time FROM yahoo-stocks",
#             "connect.cassandra.contact.points": "cassandra",
#             "connect.cassandra.username": "cassandra",
#             "connect.cassandra.password": "cassandra"
#           }
#         }
#     - command: sleep 30
#       nolog: true

# - name: Setup Cassandra Source Connector
#   entries:
#     - name: Create Source Topic
#       command: >
#         docker run --rm --network=fastdatademo_default landoop/fast-data-dev
#           kafka-topics --zookeeper fast-data-dev:2181 --topic cassandra-stocks-roundtrip --partitions 1 --replication-factor 1 --create
#     - name: Create a Cassandra Source Distributed Connector
#       command: >
#         docker run --rm --network=fastdatademo_default -i landoop/fast-data-dev
#           curl -vs --stderr - -X POST -H "Content-Type: application/json"
#                --data @-
#                "http://fast-data-dev:8083/connectors"
#       stdout_not_has: [ 'HTTP/1.1 [45][0-9][0-9] ' ]
#       stdin: |
#         {
#           "name": "cassandra-source",
#           "config": {
#             "connector.class": "com.datamountaineer.streamreactor.connect.cassandra.source.CassandraSourceConnector",
#             "tasks.max": "1",
#             "connect.cassandra.key.space": "sink",
#             "connect.cassandra.source.kcql": "INSERT INTO cassandra-stocks-roundtrip SELECT * FROM yahoo_stocks_trade",
#             "connect.cassandra.import.mode": "incremental",
#             "connect.cassandra.contact.points": "cassandra",
#             "connect.cassandra.username": "cassandra",
#             "connect.cassandra.password": "cassandra"
#           }
#         }

- name: Setup RethinkDB Connectors
  entries:
    - name: Create RethinkDB Test Database and Table
      command: >
        docker run --rm --network=fastdatademo_default landoop/fast-data-dev-rethinkdb-client
          rethinkdb-test -server rethinkdb:28015 -database landoop -create-db -table yahoo_fx -create-table
    - name: Create a RethinkDB Distributed Sink Connector
      command: >
        docker run --rm --network=fastdatademo_default -i landoop/fast-data-dev
          curl -vs --stderr - -X POST -H "Content-Type: application/json"
               --data @-
               "http://fast-data-dev:8083/connectors"
      stdout_not_has: [ 'HTTP/1.1 [45][0-9][0-9] ' ]
      stdin: |
        {
          "name": "rethink-sink",
          "config": {
            "connector.class": "com.datamountaineer.streamreactor.connect.rethink.sink.ReThinkSinkConnector",
            "tasks.max": "1",
            "topics": "yahoo-fx",
            "connect.rethink.db": "landoop",
            "connect.rethink.host": "rethinkdb",
            "connect.rethink.port": "28015",
            "connect.rethink.kcql": "INSERT INTO yahoo_fx SELECT * FROM yahoo-fx"
           }
        }
    # - name: Create Source Topic
    #   command: >
    #     docker run --rm --network=fastdatademo_default landoop/fast-data-dev
    #       kafka-topics --zookeeper fast-data-dev:2181 --topic rethink-stocks-roundtrip --partitions 1 --replication-factor 1 --create
    - name: Create a RethinkDB Distributed Source Connector
      command: >
        docker run --rm --network=fastdatademo_default -i landoop/fast-data-dev
          curl -vs --stderr - -X POST -H "Content-Type: application/json"
               --data @-
               "http://fast-data-dev:8083/connectors"
      stdout_not_has: [ 'HTTP/1.1 [45][0-9][0-9] ' ]
      stdin: |
        {
          "name": "rethink-source",
          "config": {
            "connector.class": "com.datamountaineer.streamreactor.connect.rethink.source.ReThinkSourceConnector",
            "tasks.max": "1",
            "connect.rethink.db": "landoop",
            "connect.rethink.host": "rethinkdb",
            "connect.rethink.port": "28015",
            "connect.rethink.kcql": "INSERT INTO rethink-fx-roundtrip SELECT * FROM yahoo_fx"
           }
        }
    - command: sleep 30
      nolog: true

# - name: Setup Mongo DB Connector
#   entries:
#     - name: Create a Mongo DB Distributed Connector
#       command: >
#         docker run --rm --network=fastdatademo_default -i landoop/fast-data-dev
#           curl -vs --stderr - -X POST -H "Content-Type: application/json"
#                --data @-
#                "http://fast-data-dev:8083/connectors"
#       stdout_not_has: [ 'HTTP/1.1 [45][0-9][0-9] ' ]
#       stdin: |
#         {
#           "name": "mongo-sink",
#           "config": {
#             "connector.class": "com.datamountaineer.streamreactor.connect.mongodb.sink.MongoSinkConnector",
#             "tasks.max": "1",
#             "topics": "yahoo-stocks",
#             "connect.mongo.db": "landoop",
#             "connect.mongo.connection": "mongodb://mongo:27017/landoop",
#             "connect.mongo.batch.size": "10",
#             "connect.mongo.kcql": "INSERT INTO stocks SELECT * FROM yahoo-stocks"
#           }
#         }
#     - command: sleep 30
#       nolog: true
